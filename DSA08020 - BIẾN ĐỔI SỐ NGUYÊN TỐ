#include <bits/stdc++.h>
#define endl "\n"
using namespace std;
long long x,y;
vector<int> a;
vector<int> adj[10000];
int d[10000] = {};
int visited[10000];
int parent[10000];

void sang() {
	for (int i = 2; i <= 9999; i++) {
		if (d[i] == 0) {
			for (int j = i * i ; j <= 9999; j = j + i) {
				d[j] = 1;
			}
		}
	}
	for (int i = 1000; i <= 9999; i++) {
		if (d[i] == 0) {
			a.push_back(i);
		}
	}
}

int check (long long x, long long y) {
	int dem = 0;
	while (x && y) {
		if (x % 10 != y % 10) {
			dem++;
		}
		x = x / 10;
		y = y / 10;
	}
	if (dem == 1) {
		return 1;
	} else {
		return 0;
	}
}

void init() {
	for (int i = 0; i < a.size() - 1; i++) {
		for (int j = i + 1; j < a.size(); j++) {
			if (check(a[i], a[j]) == 1) {
				adj[a[i]].push_back(a[j]);
				adj[a[j]].push_back(a[i]);
			}
		}
	}
}

void bfs(long long x) {
	queue<int> q;
	q.push(x);
	visited[x] = 1;
	while(q.size() > 0) {
		long long top = q.front();
		q.pop();
		for (auto y : adj[top]) {
			if (visited[y] == 0) {
				visited[y] = 1;
				parent[y] = top;
				q.push(y);
			}
		}
	}
}

void path(long long x, long long y) {
	bfs(x);
	vector<int> ans;
	while (y != x) {
		ans.push_back(y);
		y = parent[y];
	}
	ans.push_back(x);
	cout << ans.size() - 1 << endl;
}

int main () {
	int t;
	cin >> t;
	sang();
	init();
	while(t--) {
		cin >> x >> y;
		memset(visited, 0, sizeof(visited));
		memset(parent, 0, sizeof(parent));
		path(x,y);
	}
}
